name: Automated Testing

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

env:
  NODE_VERSION: "18"
  MONGODB_URI: mongodb://localhost:27017/rateit-test
  NEXTAUTH_SECRET: test-secret-key-for-github-actions
  NEXTAUTH_URL: http://localhost:3000

jobs:
  # Lint and format check
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check TypeScript
        run: npx tsc --noEmit

  # Unit and Integration Tests
  test-unit:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Wait for MongoDB
        run: |
          until nc -z localhost 27017; do
            echo "Waiting for MongoDB..."
            sleep 1
          done

      - name: Run unit tests
        run: npm test
        env:
          MONGODB_URI: ${{ env.MONGODB_URI }}
          NODE_ENV: test

      - name: Generate test coverage
        run: npm run test:coverage
        env:
          MONGODB_URI: ${{ env.MONGODB_URI }}
          NODE_ENV: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Build Test
  test-build:
    name: Build Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          MONGODB_URI: ${{ env.MONGODB_URI }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}

  # End-to-End Tests
  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Wait for MongoDB
        run: |
          until nc -z localhost 27017; do
            echo "Waiting for MongoDB..."
            sleep 1
          done

      - name: Build application
        run: npm run build
        env:
          MONGODB_URI: ${{ env.MONGODB_URI }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          MONGODB_URI: ${{ env.MONGODB_URI }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Upload E2E screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-screenshots
          path: test-results/
          retention-days: 30

  # Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run npm audit fix
        run: npm audit fix --dry-run

  # Performance Test
  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          MONGODB_URI: ${{ env.MONGODB_URI }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}

      - name: Start application
        run: npm start &
        env:
          MONGODB_URI: ${{ env.MONGODB_URI }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}

      - name: Wait for application to start
        run: |
          timeout 60s bash -c 'until curl -f http://localhost:3000/; do sleep 1; done'

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Notification on completion
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint, test-unit, test-build, test-e2e, security]
    if: always()
    steps:
      - name: Test Results Summary
        run: |
          echo "Test Results Summary:"
          echo "Lint: ${{ needs.lint.result }}"
          echo "Unit Tests: ${{ needs.test-unit.result }}"
          echo "Build: ${{ needs.test-build.result }}"
          echo "E2E Tests: ${{ needs.test-e2e.result }}"
          echo "Security: ${{ needs.security.result }}"
